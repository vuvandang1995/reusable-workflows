name: build_image

on:
  repository_dispatch:
    types: [run-pr-merged]

jobs:
  # Run unit test
  unit_test:
    name: unit_test-${{ github.event.client_payload.module }}
    runs-on: ubuntu-latest
    steps:
    - id: test
      run: |
        echo "Run unit-test for ${{ github.event.client_payload.module }}"

  # Scan code with SonarQube
  code_quality:
    name: code_quality-${{ github.event.client_payload.module }}
    needs: [ unit_test ]
    runs-on: ubuntu-latest
    steps:
    - run: |
        echo "Running SonarQube for ${{ github.event.client_payload.module }}"

  # Build Dockerfile to validate code
  build:
    name: build-${{ github.event.client_payload.module }}
    needs: [ code_quality ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Declare some variables
        id: vars
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=image_name::$(echo "${{ github.event.client_payload.module }}" | tr '[:upper:]' '[:lower:]')"
      - name: Build to validate code
        run: |
          cd ${{ github.event.client_payload.module }} && docker build -t ${{ steps.vars.outputs.image_name }}:${{ steps.vars.outputs.sha_short }} -f Dockerfile ../
  
  post_check_pr:
    name: noti-${{ github.event.client_payload.module }}
    needs: [unit_test, code_quality, build]
    runs-on: ubuntu-latest
    env: 
      SLACK_WEBHOOK_URL: ${{ secrets.webhook }}
    steps:
      - uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: workflow,job,commit,repo,ref,author,took
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                text: `${process.env.AS_WORKFLOW} with ${{ github.event.client_payload.module }}\n${process.env.AS_JOB} (${process.env.AS_COMMIT}) of ${process.env.AS_REPO}@${process.env.AS_REF} by ${process.env.AS_AUTHOR} ${{ job.status }} in ${process.env.AS_TOOK}`,
              }]
            }
        if: always()